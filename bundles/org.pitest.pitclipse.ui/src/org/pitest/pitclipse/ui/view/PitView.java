/*******************************************************************************
 * Copyright 2012-2019 Phil Glover and contributors
 *  
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.  You may obtain a copy
 * of the License at
 *  
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/

package org.pitest.pitclipse.ui.view;

import java.io.File;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.eclipse.core.resources.IFile;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.swt.SWT;
import org.eclipse.swt.SWTError;
import org.eclipse.swt.browser.Browser;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.ui.IActionBars;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.part.FileEditorInput;
import org.eclipse.ui.part.ViewPart;

/**
 * A view displaying the HTML report generated by PIT.
 */
public class PitView extends ViewPart implements SummaryView {
    public final static String VIEW_ID = "org.pitest.pitclipse.ui.view.PitView";
    private Browser browser = null;
    private PitUiUpdatePublisher publisher = null;
    private String homeUrlString = null;
    private Action homeAction;
    public static String HOME_BUTTON_TEXT = "Home";
    private Action backButton;
    public static String BACK_BUTTON_TEXT = "<";
    private Action forwardButton;
    public static String FORWARD_BUTTON_TEXT = ">";

    @Override
    public synchronized void createPartControl(Composite parent) {
        try {
            browser = new Browser(parent, SWT.NONE);
            publisher = new PitUiUpdatePublisher(browser);
            browser.addProgressListener(publisher);
            // create back button
            backButton = new Action(BACK_BUTTON_TEXT) {
                @Override
                public void run() {
                    browser.back();
                }
            };
            // create home button for navigation
            homeAction = new Action(HOME_BUTTON_TEXT) {
                @Override
                public void run() {
                    browser.setUrl(homeUrlString);
                }
            };
            // create forward button
            forwardButton = new Action(FORWARD_BUTTON_TEXT) {
                @Override
                public void run() {
                    browser.forward();
                }
            };
            IActionBars actionBars = getViewSite().getActionBars();
            IToolBarManager toolBar = actionBars.getToolBarManager();
            toolBar.add(backButton);
            toolBar.add(homeAction);
            toolBar.add(forwardButton);
            actionBars.updateActionBars();
        } catch (SWTError e) {
            MessageBox messageBox = new MessageBox(parent.getShell(), SWT.ICON_ERROR | SWT.OK);
            messageBox.setMessage("Browser cannot be initialized.");
            messageBox.setText("Exit");
            messageBox.open();
        }
    }

    @Override
    public void setFocus() {
    }

    @Override
    public synchronized void update(File result) {
        if (result == null) {
            homeUrlString = null;
            browser.setText("<html/>");
        } else {
            homeUrlString = result.toURI().toString();
            // fallback, if the file does not exist
            browser.setUrl(homeUrlString);
            String url = getUrlToLastActiveClass(result);
            if (url != null && new File(url).exists()) {
                browser.setUrl(url);
            }
        }
    }

    /**
     * Looks up the last active file from an editor and constructs a path to its
     * page of the result
     * 
     * @param result file which is used for the path beginning
     * @return String which represents the path in the result folder or null, if the
     *         file form the editor is no .java file or no FileEditor was active
     *         last
     */
    private String getUrlToLastActiveClass(File result) {
        IEditorPart editor = getSite().getPage().getActiveEditor();
        if (editor == null) {
            return null;
        }
        IFile file = ((FileEditorInput) editor.getEditorInput()).getFile();
        // filter out project and src dir from path
        String cleanedPath = file.getFullPath().toString().replaceAll(File.separatorChar + file.getProject().getName()
                + File.separatorChar + "[^" + File.separatorChar + "]*" + File.separatorChar, "");

        return getFilePathInResultDir(cleanedPath, result.getParent());
    }

    /**
     * Gets the path of the given path in context with the base dir of an result
     * 
     * @param filePath of file, which should be present in pit result
     * @param baseDir  of the results in HTML format
     * @return file path in context of the base dir
     */
    public static String getFilePathInResultDir(String filePath, String baseDir) {
        // replace separator chars with dots for regEx and path
        filePath = filePath.replace(File.separatorChar, '.');
        Pattern pattern = Pattern.compile("(.*)(\\.)(.*\\.java)");
        Matcher matcher = pattern.matcher(filePath);
        if (matcher.find() && matcher.groupCount() == 3) {
            // group 2 is not from interest
            return baseDir + File.separatorChar + matcher.group(1) + File.separatorChar + matcher.group(3) + ".html";
        }
        return null;
    }
}
